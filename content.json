{"meta":{"title":"Hexo","subtitle":"","description":"","author":"John Doe","url":"https://gwq132580.github.io","root":"/"},"pages":[],"posts":[{"title":"前端面试题1","slug":"前端面试题1","date":"2020-08-01T04:48:06.000Z","updated":"2020-08-01T04:48:21.537Z","comments":true,"path":"2020/08/01/前端面试题1/","link":"","permalink":"https://gwq132580.github.io/2020/08/01/%E5%89%8D%E7%AB%AF%E9%9D%A2%E8%AF%95%E9%A2%981/","excerpt":"","text":"1.v-if和v-showv-if是真正的条件渲染 是元素的销毁和重建v-show是通过display:none来实现元素的隐藏的v-if的切换开销比较大，v-show的渲染开销大如果元素需要频繁的切换需要v-show,否则v-if 2.样式穿透less/sass 父元素 /deep/ 子元素stylus 父元素 /deep/ 子元素 或父元素 &gt;&gt;&gt; 子元素 3.安装fastClick解决移动端300ms延迟问题 4.$nextTick可以拿到最新的dom 5.data为什么必须是函数因为对象是引用类型，修改了组价中的值会影响到其他组件，儿在cli中使用函数则不会出现这个问题 6.keep-alive的作用是内置组件 用keep-alive包裹router-view则不会重复渲染dom,他把组件的状态保留到了内存中，防止重复渲染 7.key的作用可以高效的更新虚拟dom,提高性能 diff算法 8.父向子传值用v-bind 子组件用props接收 9.子向父传值用$emit(‘函数名’,参数) 父组件用@函数名=function(msg) 10.兄弟组件传值用eventbus bus.$emit() 和bus.$on 11.防抖(debounce)和节流(throttle)防抖:触发事件后函数在n秒内只执行一次，如果在该时间内再次触发，则会重新计算函数执行时间(控制次数)节流:连续触发事件，但在n秒内只执行一次(控制效率) 12.computed和watch区别computed依赖的值发生改变会重新执行函数，不能写异步操作watch侦听的值的改变会重新执行函数，可以写异步操作 13.git命令git commit -m ‘init my project’git add .git init 初始化git status 查看工作区，暂存区的状态git merge 合并分支git checkout 切换分支git clone 克隆远程仓库 14.vuex原理redux 15.canvas 16.怎么理解前端工程师用户体验要好编写的页面直接和用户面对面，编写页面的时候要先和ui配合，拿到设计图后和后端配合调试好接口，再开始写项目 17.js数据类型基本数据类型:null,number,boolean,symbol,string,undifined复合数据类型:Date,Function,Array,Object,基本包装类型(Number,String,Boolean) 18.js发生隐式类型转换的运算符 / % 19.typeof返回的是字符串(注意陷阱)null==undefinedtypeof null=’object’(历史遗留问题)typeof arr=’object’typeof function=’function’var d;typeof d==undefined是false!!!typeof d==’undefined’是true 20.undefined和null的区别typeof null=objecttypepf undefined=undefinedundefined表示现在没有，未来也不会有(缺少值)null表示现在没有，未来会有(无的对象)undefined+数字是NaN!!!null+数字是该数字null转化为数值为0，undefined转化为数值是NaNnull作为原型链的终点 21.逻辑运算符&amp;&amp;：左边表达式为真,就返回右边表达式，否则直接返回false||:左边表达式为真，直接返回true,否则看后面的 22.in的用法key in obj 检测对象是否存在该属性for in 遍历对象或数组 23.delete关键字的使用用于删除对象中的某个属性还可以删除全局变量，但是不能删除var 定义的变量 24.break和continuebreak退出整个循环，执行循环外的代码continue退出当前循环，执行下面的循环 25.自定义构造函数有默认的返回值，默认返回this可以修改返回值,返回值为值类型时，修改无效，返回值为引用类型时修改有效 26.instanceof和constructor都能找父亲 27.in和hasOwnProperty都能检测对象上是否有属性和方法in:能检测公有，也能检测私有hasOwnProperty只能检测私有 28.检测对象上的某个属性是否在原型对象上(公有)key in obj&amp;&amp;!obj.hasOwnProperty(key) 29.判断是否是指定实例对象的原型对象Person.prototype.isPrototypeOf(p1) 30.instanceof判断对象是否在某个构造函数的原型链上 31.选择器类名选择器 ID选择器 标签选择器 通配符选择器 后代选择器 属性选择器 直接父子选择器 兄弟选择器 分组选择器 32.设计模式单例模式:一个类仅有一个实例，提供一个访问他的全局访问点策略模式:定义一系列的方法，把它们一个个封装起来，并且使它们可以相互替换迭代器模式:在使用迭代器模式之后，即使不关心对象的内部构造，也可以按顺序访问其中的每个元素(forEach)发布-订阅模式:也称作观察者模式，定义了对象间的一种一对多的依赖关系，当一个对象的状态发生改变时，所有依赖于它的对象都将得到通知工厂模式:解决了创建多个对象的问题,但是没有结解决对象识别的问题(怎样知道一个对象的类型)命名空间模式: 33.事件委托事件委托就是利用事件冒泡，只指定一个事件处理程序，就可以管理某一类型的所有事件 34.继承方法混入式继承 浅拷贝原型继承 Child.prototype=Person.prototype原型链继承 Child.protype=new Person()构造函数继承 window.Person.call(this)组合继承 ：构造函数继承+原型链继承es6 extends 继承 35.创建对象的方式字面量new Object自定义构造函数工厂模式(不知道自己的父类)Object.create() 可以创建没有原型链的对象，提高查询效率Object.assign 36.Boolean转换为false的有5个，null undefined NaN ‘’ 0基本包装类型typeof 为object 37.特权方法，在函数内部调用了私有成员的实例方法称为特权方法 38.this指向普通函数执行的时候this指向window,js文件指向global作为方法调用的时候，指向方法的调用者实例化构造函数的时候，this指向实例化出来的对象call,apply可以改变this指向，this指向传入的第一个参数 39.全局变量不安全 40.new.target判断是否使用了new关键字 41.数组去重1.Array.from(new Set(arr))2.indexOf===-1 就push 42.全局作用域和函数作用域全局作用域: 函数外部的作用域函数作用域: 函数内部的作用域全局变量: 函数外部定义的变量局部变量: 函数内部定义的变量(形参也是局部变量)，局部变量在使用后就会被销毁 43.函数提升高于变量提升 44.网页一打开形成全局作用域 45.闭包:函数嵌套函数，一个函数访问另一个函数作用域中的变量优点:缓存数据缺点:容易导致内存泄露 46.content-type定义文件的类型和网页的编码，决定接收方用什么编码读取这个文件 47.for in 遍历对象 for of遍历数组 48.window.status用于用来指定浏览器状态栏里的临时消息 49.防止xss攻击 输入过滤,控制输入字符的长度 50.typeof NaN==’number’(注意typeof得到的是字符串类型) 51.new 操作符做了什么新建一个实例对象该对象的constructor属性为该构造函数的名称，该对象的__proto__指向构造函数的prototype将this指向该实例对象将初始化完毕的新对象地址，保存到等号左边的变量中 52.跨域的方式jsonp(只能进行get请求) nginx代理 proxy代理 cors 后台修改header 53.window.open 方法用于打开一个新的浏览器窗口或查找一个已命名的窗口。 54.手机和邮箱的正则表达式/^1[3-9]\\d{9}$/ /^[0-9a-zA-Z-]+@[0-9a-zA-Z-]+.[0-9a-zA-Z-_]+$/ 55.数值区间在2-32的随机数组parseInt(31 * Math.random() + 2) 56.axios底层promise加原生ajax 57.三次握手和四次挥手 58.进程和线程的区别进程是操作系统资源分配的基本单位，而线程是任务调度和执行的基本单位 59.扁平化数组array.flatjson.parse正则表达式pushreduce…扩展运算符 60.vuexState、 Getter、Mutation 、Action页面通过mapAction异步提交事件到action。action通过commit把对应参数同步提交到mutation。mutation会修改state中的值Action 提交的是 mutation，而不是直接变更状态。 61.触发BFC的方式display为inline-block或table-cellfloat不是noneposition absolute或fixed(脱离标准文档流)overflow不是visible 62.双向数据绑定原理(angular是脏值检测)数据劫持结合发布者订阅者模式，通过Object.defineProperty来劫持各个属性的getter和setter,数据变动时发布消息给订阅者，触发相应的监听回调MVVM作为绑定的入口，整合Observer,Compile和Watcher三者，通过Observer来监听model数据变化，通过Compile来解析模板指令，利用Watcher来搭建起Compile和Observer之间通信的桥梁达到数据变化影响视图，视图交互影响数据的双向数据绑定效果(针对于input等表单控件) 63.js轮播图超出部分overflow:hidden动的是图片组，窗口不动图片组的宽度要多算一张(把第一张图片放到最后) 64.组件传值父传子:父组件v-bind绑定数据，子组件props接收子传父:父组件自定义事件func，子组件通过this.$emit(‘func’)触发父组件的自定义事件子传子:子传父，再父传子或者通过eventbus中转,子组件Bus.$emit(‘zifu’,参数)，子组件Bus.$on(‘zifu’,回调函数)或者vuex 65.position：relative是相对于元素本来的位置进行定位absolute是相对于父元素来进行定位","categories":[],"tags":[]},{"title":"Hello World","slug":"hello-world","date":"2020-08-01T03:23:09.499Z","updated":"2020-08-01T03:23:09.500Z","comments":true,"path":"2020/08/01/hello-world/","link":"","permalink":"https://gwq132580.github.io/2020/08/01/hello-world/","excerpt":"","text":"Welcome to Hexo! This is your very first post. Check documentation for more info. If you get any problems when using Hexo, you can find the answer in troubleshooting or you can ask me on GitHub. Quick StartCreate a new post1$ hexo new &quot;My New Post&quot; More info: Writing Run server1$ hexo server More info: Server Generate static files1$ hexo generate More info: Generating Deploy to remote sites1$ hexo deploy More info: Deployment","categories":[],"tags":[]}],"categories":[],"tags":[]}